const { Telegraf } = require('telegraf');
const store = require('app-store-scraper');
const fs = require('fs').promises;
const path = require('path');
const Parser = require('rss-parser');
const parser = new Parser();
const axios = require('axios');
const cheerio = require('cheerio');

// –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
const BOT_TOKEN = process.env.BOT_TOKEN || '7624758051:AAGjLs1BLaF43CjTjPIwd3pJlKvprNaenZA';

// ID –ø–æ–¥–∫–∞—Å—Ç–∞ "–î–≤–∞ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–æ–≥–æ"
const PODCAST_ID = process.env.PODCAST_ID || '1371411915';

// RSS-–ª–µ–Ω—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
const RSS_FEED_URL = 'https://feeds.transistor.fm/8ad5c0b4-9622-4e86-ba14-2a2e436f68b3';

// –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–∞—Å—Ç–æ–≤ (–Ω–∞ 28 –∞–≤–≥—É—Å—Ç–∞ 2025)
const PODCAST_STATS = {
    totalEpisodes: 245,
    totalHours: 164,
    startDate: new Date('2018-04-12') // 12 –∞–ø—Ä–µ–ª—è 2018 –≥–æ–¥–∞
};

// –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const STATS_FILE = path.join(__dirname, 'podcast_stats.json');



// –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–Ω–∑–∏–π (—Ç–æ–ø 50 —Å—Ç—Ä–∞–Ω –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ Apple Store)
const COUNTRIES = [
    { code: 'us', name: '–°–®–ê' },
    { code: 'gb', name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è' },
    { code: 'ca', name: '–ö–∞–Ω–∞–¥–∞' },
    { code: 'au', name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è' },
    { code: 'de', name: '–ì–µ—Ä–º–∞–Ω–∏—è' },
    { code: 'fr', name: '–§—Ä–∞–Ω—Ü–∏—è' },
    { code: 'it', name: '–ò—Ç–∞–ª–∏—è' },
    { code: 'es', name: '–ò—Å–ø–∞–Ω–∏—è' },
    { code: 'ru', name: '–†–æ—Å—Å–∏—è' },
    { code: 'jp', name: '–Ø–ø–æ–Ω–∏—è' },
    { code: 'kr', name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è' },
    { code: 'cn', name: '–ö–∏—Ç–∞–π' },
    { code: 'in', name: '–ò–Ω–¥–∏—è' },
    { code: 'br', name: '–ë—Ä–∞–∑–∏–ª–∏—è' },
    { code: 'mx', name: '–ú–µ–∫—Å–∏–∫–∞' },
    { code: 'ar', name: '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞' },
    { code: 'cl', name: '–ß–∏–ª–∏' },
    { code: 'co', name: '–ö–æ–ª—É–º–±–∏—è' },
    { code: 'pe', name: '–ü–µ—Ä—É' },
    { code: 'nl', name: '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã' },
    { code: 'be', name: '–ë–µ–ª—å–≥–∏—è' },
    { code: 'ch', name: '–®–≤–µ–π—Ü–∞—Ä–∏—è' },
    { code: 'at', name: '–ê–≤—Å—Ç—Ä–∏—è' },
    { code: 'se', name: '–®–≤–µ—Ü–∏—è' },
    { code: 'no', name: '–ù–æ—Ä–≤–µ–≥–∏—è' },
    { code: 'dk', name: '–î–∞–Ω–∏—è' },
    { code: 'fi', name: '–§–∏–Ω–ª—è–Ω–¥–∏—è' },
    { code: 'pl', name: '–ü–æ–ª—å—à–∞' },
    { code: 'cz', name: '–ß–µ—Ö–∏—è' },
    { code: 'hu', name: '–í–µ–Ω–≥—Ä–∏—è' },
    { code: 'sk', name: '–°–ª–æ–≤–∞–∫–∏—è' },
    { code: 'si', name: '–°–ª–æ–≤–µ–Ω–∏—è' },
    { code: 'hr', name: '–•–æ—Ä–≤–∞—Ç–∏—è' },
    { code: 'bg', name: '–ë–æ–ª–≥–∞—Ä–∏—è' },
    { code: 'ro', name: '–†—É–º—ã–Ω–∏—è' },
    { code: 'lt', name: '–õ–∏—Ç–≤–∞' },
    { code: 'lv', name: '–õ–∞—Ç–≤–∏—è' },
    { code: 'ee', name: '–≠—Å—Ç–æ–Ω–∏—è' },
    { code: 'ua', name: '–£–∫—Ä–∞–∏–Ω–∞' },
    { code: 'by', name: '–ë–µ–ª–∞—Ä—É—Å—å' },
    { code: 'kz', name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω' },
    { code: 'uz', name: '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω' },
    { code: 'kg', name: '–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω' },
    { code: 'tj', name: '–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω' },
    { code: 'tm', name: '–¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω' },
    { code: 'az', name: '–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω' },
    { code: 'ge', name: '–ì—Ä—É–∑–∏—è' },
    { code: 'am', name: '–ê—Ä–º–µ–Ω–∏—è' },
    { code: 'md', name: '–ú–æ–ª–¥–æ–≤–∞' },
    { code: 'rs', name: '–°–µ—Ä–±–∏—è' },
    { code: 'me', name: '–ß–µ—Ä–Ω–æ–≥–æ—Ä–∏—è' },
    { code: 'mk', name: '–°–µ–≤–µ—Ä–Ω–∞—è –ú–∞–∫–µ–¥–æ–Ω–∏—è' },
    { code: 'ba', name: '–ë–æ—Å–Ω–∏—è –∏ –ì–µ—Ä—Ü–µ–≥–æ–≤–∏–Ω–∞' },
    { code: 'al', name: '–ê–ª–±–∞–Ω–∏—è' },
    { code: 'il', name: '–ò–∑—Ä–∞–∏–ª—å' },
    { code: 'tr', name: '–¢—É—Ä—Ü–∏—è' },
    { code: 'sa', name: '–°–∞—É–¥–æ–≤—Å–∫–∞—è –ê—Ä–∞–≤–∏—è' },
    { code: 'ae', name: '–û–ê–≠' },
    { code: 'eg', name: '–ï–≥–∏–ø–µ—Ç' },
    { code: 'za', name: '–Æ–ê–†' },
    { code: 'ng', name: '–ù–∏–≥–µ—Ä–∏—è' },
    { code: 'ke', name: '–ö–µ–Ω–∏—è' },
    { code: 'th', name: '–¢–∞–∏–ª–∞–Ω–¥' },
    { code: 'vn', name: '–í—å–µ—Ç–Ω–∞–º' },
    { code: 'sg', name: '–°–∏–Ω–≥–∞–ø—É—Ä' },
    { code: 'my', name: '–ú–∞–ª–∞–π–∑–∏—è' },
    { code: 'id', name: '–ò–Ω–¥–æ–Ω–µ–∑–∏—è' },
    { code: 'ph', name: '–§–∏–ª–∏–ø–ø–∏–Ω—ã' },
    { code: 'nz', name: '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è' },
    { code: 'pt', name: '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è' },
    { code: 'gr', name: '–ì—Ä–µ—Ü–∏—è' },
    { code: 'cy', name: '–ö–∏–ø—Ä' },
    { code: 'mt', name: '–ú–∞–ª—å—Ç–∞' },
    { code: 'lu', name: '–õ—é–∫—Å–µ–º–±—É—Ä–≥' },
    { code: 'ie', name: '–ò—Ä–ª–∞–Ω–¥–∏—è' },
    { code: 'is', name: '–ò—Å–ª–∞–Ω–¥–∏—è' }
];

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω
async function getPodcastReviews(ctx, limit = 20) {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω...');
        
        const allReviews = [];
        let processedCountries = 0;
        let totalCountries = COUNTRIES.length;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        const progressMessage = await ctx.reply(`üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–Ω–∑–∏–π...\n–ü—Ä–æ–≤–µ—Ä—è—é ${totalCountries} —Å—Ç—Ä–∞–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
        for (const country of COUNTRIES) {
            try {
                console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name} (${country.code})...`);
                
                const reviews = await store.reviews({
                    id: PODCAST_ID,
                    country: country.code,
                    page: 1,
                    sort: store.sort.RECENT
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –∫ –∫–∞–∂–¥–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏
                const reviewsWithCountry = reviews.map(review => ({
                    ...review,
                    countryCode: country.code,
                    countryName: country.name
                }));
                
                allReviews.push(...reviewsWithCountry);
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name}`);
                
                processedCountries++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω
                if (processedCountries % 10 === 0 || processedCountries === totalCountries) {
                    try {
                        await ctx.telegram.editMessageText(
                            progressMessage.chat.id,
                            progressMessage.message_id,
                            null,
                            `üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–Ω–∑–∏–π: ${processedCountries}/${totalCountries} —Å—Ç—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ\nüìä –ù–∞–π–¥–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π`
                        );
                    } catch (editError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    }
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await new Promise(resolve => setTimeout(resolve, 150));
                
            } catch (countryError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name}:`, countryError.message);
                processedCountries++;
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        allReviews.sort((a, b) => {
            const dateA = new Date(a.updated || 0);
            const dateB = new Date(b.updated || 0);
            return dateB - dateA;
        });
        
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
        const latestReviews = allReviews.slice(0, limit);
        
        console.log(`–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${COUNTRIES.length} —Å—Ç—Ä–∞–Ω`);
        console.log(`–û—Ç–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${latestReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π`);
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
        try {
            await ctx.telegram.editMessageText(
                progressMessage.chat.id,
                progressMessage.message_id,
                null,
                `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalCountries} —Å—Ç—Ä–∞–Ω\nüìù –ù–∞–π–¥–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π\n‚≠ê –û—Ç–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${latestReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π`
            );
        } catch (editError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        
        return latestReviews;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
async function getMonthlyReviews(ctx) {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü...');
        
        const allReviews = [];
        let processedCountries = 0;
        let totalCountries = COUNTRIES.length;
        const oneMonthAgo = new Date();
        oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        const progressMessage = await ctx.reply(`üóìÔ∏è –ò—â—É —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü...\n–ü—Ä–æ–≤–µ—Ä—è—é ${totalCountries} —Å—Ç—Ä–∞–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã.`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
        for (const country of COUNTRIES) {
            try {
                console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name} (${country.code})...`);
                
                const reviews = await store.reviews({
                    id: PODCAST_ID,
                    country: country.code,
                    page: 1,
                    sort: store.sort.RECENT
                });

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                const monthlyReviews = reviews.filter(review => {
                    if (!review.updated) return false;
                    const reviewDate = new Date(review.updated);
                    return reviewDate >= oneMonthAgo;
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –∫ –∫–∞–∂–¥–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏
                const reviewsWithCountry = monthlyReviews.map(review => ({
                    ...review,
                    countryCode: country.code,
                    countryName: country.name
                }));
                
                allReviews.push(...reviewsWithCountry);
                console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${monthlyReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –º–µ—Å—è—Ü –∏–∑ ${country.name}`);
                
                processedCountries++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∞–Ω
                if (processedCountries % 10 === 0 || processedCountries === totalCountries) {
                    try {
                        await ctx.telegram.editMessageText(
                            progressMessage.chat.id,
                            progressMessage.message_id,
                            null,
                            `üóìÔ∏è –ü–æ–∏—Å–∫ –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π: ${processedCountries}/${totalCountries} —Å—Ç—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ\nüìä –ù–∞–π–¥–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –º–µ—Å—è—Ü`
                        );
                    } catch (editError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    }
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 150));
                
            } catch (countryError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name}:`, countryError.message);
                processedCountries++;
            }
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        allReviews.sort((a, b) => {
            const dateA = new Date(a.updated || 0);
            const dateB = new Date(b.updated || 0);
            return dateB - dateA;
        });
        
        console.log(`–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –º–µ—Å—è—Ü –∏–∑ ${COUNTRIES.length} —Å—Ç—Ä–∞–Ω`);
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
        try {
            await ctx.telegram.editMessageText(
                progressMessage.chat.id,
                progressMessage.message_id,
                null,
                `‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalCountries} —Å—Ç—Ä–∞–Ω\nüìù –ù–∞–π–¥–µ–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü`
            );
        } catch (editError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        
        return allReviews;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π:', error);
        throw error;
    }
}





// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cleanText(text) {
    if (!text) return text;
    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏
    return text.replace(/\r?\n|\r/g, ' ').replace(/\s+/g, ' ').trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏
function escapeMarkdownKeepEmoji(text) {
    if (!text) return text;
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown, –Ω–µ —Ç—Ä–æ–≥–∞—è —ç–º–æ–¥–∑–∏
    return text.replace(/([_*\[\]()~`>#+=|{}.!-])/g, '\\$1');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text) {
    if (!text) return text;
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    return text.replace(/([_`\[\]])/g, '\\$1');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
function formatReviewMessage(review, index) {
    let message = `üìù –†–µ—Ü–µ–Ω–∑–∏—è ${index + 1}\n\n`;
    message += `üìå *${escapeMarkdown(cleanText(review.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))}*\n`;
    message += `üë§ –ê–≤—Ç–æ—Ä: ${escapeMarkdown(cleanText(review.userName || '–ê–Ω–æ–Ω–∏–º'))}\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (review.source) {
        const sourceEmoji = {
            'Apple Podcasts': 'üçé'
        };
        message += `${sourceEmoji[review.source] || 'üì±'} –ò—Å—Ç–æ—á–Ω–∏–∫: ${review.source}\n`;
    } else {
        message += `üåç –°—Ç—Ä–∞–Ω–∞: ${review.countryName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${review.countryCode || '?'})\n`;
    }
    
    if (review.score !== null && review.score !== undefined) {
        message += `‚≠ê –û—Ü–µ–Ω–∫–∞: ${'‚òÖ'.repeat(review.score || 0)}${'‚òÜ'.repeat(5 - (review.score || 0))} (${review.score || 0}/5)\n`;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ updated
    let dateStr = '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    if (review.updated) {
        const date = new Date(review.updated);
        dateStr = date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    } else if (review.date) {
        const date = new Date(review.date);
        dateStr = date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long', 
            day: 'numeric'
        });
    }
    message += `üìÖ –î–∞—Ç–∞: ${dateStr}\n\n`;
    
    message += `üí¨ *–¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏:*\n${escapeMarkdown(cleanText(review.text || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'))}`;
    
    return message;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
async function getAllPossibleReviews(ctx) {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ü–µ–Ω–∑–∏–π...');
        
        const allReviews = [];
        let processedCountries = 0;
        let totalCountries = COUNTRIES.length;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        const progressMessage = await ctx.reply(`üåç –°–æ–±–∏—Ä–∞—é –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∏–∑ Apple Podcasts...\n–ü—Ä–æ–≤–µ—Ä—è—é ${totalCountries} —Å—Ç—Ä–∞–Ω, –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞–∂–¥–æ–π. –≠—Ç–æ –∑–∞–π–º–µ—Ç 3-5 –º–∏–Ω—É—Ç.`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü)
        for (const country of COUNTRIES) {
            try {
                console.log(`–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name} (${country.code})...`);
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
                for (let page = 1; page <= 3; page++) {
                    try {
                        const reviews = await store.reviews({
                            id: PODCAST_ID,
                            country: country.code,
                            page: page,
                            sort: store.sort.RECENT
                        });

                        if (reviews.length === 0) break; // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Ä–µ—Ü–µ–Ω–∑–∏–π, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º

                        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –∫ –∫–∞–∂–¥–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏
                        const reviewsWithCountry = reviews.map(review => ({
                            ...review,
                            countryCode: country.code,
                            countryName: country.name
                        }));
                        
                        allReviews.push(...reviewsWithCountry);
                        console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page} –∏–∑ ${country.name}`);
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                        await new Promise(resolve => setTimeout(resolve, 100));
                    } catch (pageError) {
                        console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page} –∏–∑ ${country.name}:`, pageError.message);
                        break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã
                    }
                }
                
                processedCountries++;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–∞–Ω
                if (processedCountries % 5 === 0 || processedCountries === totalCountries) {
                    try {
                        await ctx.telegram.editMessageText(
                            progressMessage.chat.id,
                            progressMessage.message_id,
                            null,
                            `üåç –°–±–æ—Ä –≤—Å–µ—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π: ${processedCountries}/${totalCountries} —Å—Ç—Ä–∞–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ\nüìä –°–æ–±—Ä–∞–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π`
                        );
                    } catch (editError) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    }
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 150));
                
            } catch (countryError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ ${country.name}:`, countryError.message);
                processedCountries++;
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ—Ü–µ–Ω–∑–∏–π (–ø–æ ID)
        const uniqueReviews = allReviews.filter((review, index, self) => 
            index === self.findIndex(r => r.id === review.id)
        );
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        uniqueReviews.sort((a, b) => {
            const dateA = new Date(a.updated || 0);
            const dateB = new Date(b.updated || 0);
            return dateB - dateA;
        });
        
        console.log(`–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueReviews.length}`);
        
        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
        try {
            await ctx.telegram.editMessageText(
                progressMessage.chat.id,
                progressMessage.message_id,
                null,
                `‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!\nüìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${totalCountries} —Å—Ç—Ä–∞–Ω (–ø–æ 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–∞—è)\nüìù –°–æ–±—Ä–∞–Ω–æ ${allReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π\nüîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: ${uniqueReviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π`
            );
        } catch (editError) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        
        return uniqueReviews;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
function getCorrectForm(number, forms) {
    const n = Math.abs(number) % 100;
    const n1 = n % 10;
    
    if (n > 10 && n < 20) return forms[2];
    if (n1 > 1 && n1 < 5) return forms[1];
    if (n1 === 1) return forms[0];
    return forms[2];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
function parseDurationToSeconds(durationText) {
    if (!durationText) return 0;
    
    if (/^\d+$/.test(durationText)) {
        return parseInt(durationText);
    }
    
    const parts = durationText.split(':').map(p => parseInt(p)).reverse();
    let seconds = 0;
    
    if (parts[0]) seconds += parts[0];
    if (parts[1]) seconds += parts[1] * 60;
    if (parts[2]) seconds += parts[2] * 3600;
    
    return seconds;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ø–∏–∑–æ–¥ —Å podcast.ru
async function getPodcastRuEpisodeLink(episodeTitle) {
    try {
        const url = 'https://podcast.ru/1371411915/e';
        
        const response = await axios.get(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        });
        
        const $ = cheerio.load(response.data);
        
        // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ø–∏–∑–æ–¥—ã
        const episodes = [];
        $('a[href*="/e/"]').each((i, element) => {
            const $link = $(element);
            const href = $link.attr('href');
            const title = $link.text().trim() || $link.find('*').text().trim();
            
            if (href && title) {
                episodes.push({
                    title: title,
                    link: href.startsWith('http') ? href : `https://podcast.ru${href}`
                });
            }
        });
        
        // –ò—â–µ–º —ç–ø–∏–∑–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        const cleanEpisodeTitle = episodeTitle.toLowerCase().replace(/[^\w\s]/g, '');
        const matchingEpisode = episodes.find(ep => {
            const cleanTitle = ep.title.toLowerCase().replace(/[^\w\s]/g, '');
            return cleanTitle.includes(cleanEpisodeTitle.substring(0, 20)) || 
                   cleanEpisodeTitle.includes(cleanTitle.substring(0, 20));
        });
        
        return matchingEpisode ? matchingEpisode.link : null;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ podcast.ru:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const data = await fs.readFile(STATS_FILE, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const initialStats = {
            ...PODCAST_STATS,
            lastEpisodeId: null,
            lastCheck: new Date().toISOString()
        };
        await saveStats(initialStats);
        return initialStats;
    }
}

async function saveStats(stats) {
    try {
        await fs.writeFile(STATS_FILE, JSON.stringify(stats, null, 2), 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–∞—Å—Ç–∞
function calculateTimeSinceStart(startDate, currentDate) {
    const diffMs = currentDate - startDate;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    const years = Math.floor(diffDays / 365);
    const remainingDays = diffDays % 365;
    const months = Math.floor(remainingDays / 30);
    const days = remainingDays % 30;
    
    return { years, months, days };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —ç–ø–∏–∑–æ–¥–µ
async function formatNewEpisodeMessage(stats, newEpisode) {
    const episodeCount = stats.totalEpisodes;
    const totalHours = Math.round(stats.totalHours);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ
    const hourForm = getCorrectForm(totalHours, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']);
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –Ω–∞—á–∞–ª–∞
    const timeSince = calculateTimeSinceStart(stats.startDate, new Date(newEpisode.pubDate));
    const yearForm = getCorrectForm(timeSince.years, ['–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç']);
    const monthForm = getCorrectForm(timeSince.months, ['–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤']);
    const dayForm = getCorrectForm(timeSince.days, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']);
    
    let timeText = '';
    if (timeSince.years > 0) timeText += `${timeSince.years} ${yearForm}`;
    if (timeSince.months > 0) {
        if (timeText) timeText += ' ';
        timeText += `${timeSince.months} ${monthForm}`;
    }
    if (timeSince.days > 0) {
        if (timeText) timeText += ' ';
        timeText += `${timeSince.days} ${dayForm}`;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç–ø–∏–∑–æ–¥ —Å podcast.ru
    let episodeLink = '';
    try {
        const podcastRuLink = await getPodcastRuEpisodeLink(newEpisode.title);
        if (podcastRuLink) {
            episodeLink = `\n\n–°–ª—É—à–∞—Ç—å: ${podcastRuLink}`;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ podcast.ru:', error);
    }
    
    return `*–í—ã—à–µ–ª –Ω–æ–≤—ã–π –≤—ã–ø—É—Å–∫*\n\n–≠—Ç–æ –≤–∞—à ${episodeCount}-–π –≤—ã–ø—É—Å–∫, –≤—ã –∑–∞–ø–∏—Å–∞–ª–∏ —É–∂–µ ${totalHours} ${hourForm} –ø–æ–¥–∫–∞—Å—Ç–æ–≤. –í—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ—Ç –ø–æ–¥–∫–∞—Å—Ç ${timeText}.${episodeLink}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
async function checkForNewEpisodes() {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤...');
        
        const stats = await loadStats();
        const feed = await parser.parseURL(RSS_FEED_URL);
        
        if (!feed.items || feed.items.length === 0) {
            console.log('RSS-–ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞');
            return;
        }
        
        // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥
        const latestEpisode = feed.items[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ —ç–ø–∏–∑–æ–¥
        if (stats.lastEpisodeId === latestEpisode.guid) {
            console.log('–ù–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–µ—Ç');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–π–ª–µ—Ä –∏ –¥–ª–∏–Ω–Ω–µ–µ 5 –º–∏–Ω—É—Ç
        const title = latestEpisode.title?.toLowerCase() || '';
        const isTrailer = title.includes('—Ç—Ä–µ–π–ª–µ—Ä') || title.includes('trailer');
        const duration = parseDurationToSeconds(latestEpisode.itunes?.duration);
        const minutes = duration / 60;
        
        if (isTrailer || minutes < 5) {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º: "${latestEpisode.title}" (—Ç—Ä–µ–π–ª–µ—Ä –∏–ª–∏ <5 –º–∏–Ω)`);
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞, –Ω–æ –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats.lastEpisodeId = latestEpisode.guid;
            await saveStats(stats);
            return;
        }
        
        console.log(`üéâ –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥: "${latestEpisode.title}"`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats.totalEpisodes += 1;
        stats.totalHours += duration / 3600; // –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—ã
        stats.lastEpisodeId = latestEpisode.guid;
        stats.lastCheck = new Date().toISOString();
        
        await saveStats(stats);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = await formatNewEpisodeMessage(stats, latestEpisode);
        
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–æ –≤—Å–µ —á–∞—Ç—ã...');
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', message);
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ –≤—Å–µ —á–∞—Ç—ã (–ø–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º)
        // TODO: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
    ctx.reply(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ "–î–≤–∞ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–æ–≥–æ".\n\n' +
        '–ö–æ–º–∞–Ω–¥—ã:\n' +
        '/reviews - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ Apple Podcasts\n' +
        '/month - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n' +
        '/all - –ø–æ–ª—É—á–∏—Ç—å –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ!)\n' +
        '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx) => {
    ctx.reply(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
        'üçé /reviews - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ä–µ—Ü–µ–Ω–∑–∏–π –∏–∑ Apple Podcasts\n' +
        'üóìÔ∏è /month - –≤—Å–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n' +
        'üåç /all - –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏ (73 —Å—Ç—Ä–∞–Ω—ã √ó 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)\n' +
        '‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–ü–æ–¥–∫–∞—Å—Ç: "–î–≤–∞ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–æ–≥–æ"\n\n' +
        '–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n' +
        'üçé Apple Podcasts (73 —Å—Ç—Ä–∞–Ω—ã, –¥–æ ~1000 —Ä–µ—Ü–µ–Ω–∑–∏–π)'
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reviews
bot.command('reviews', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ü–µ–Ω–∑–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å)
        const reviews = await getPodcastReviews(ctx);
        
        if (reviews.length === 0) {
            await ctx.reply('–†–µ—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(`üéß *–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–¥–∫–∞—Å—Ç–∞ "–î–≤–∞ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–æ–≥–æ"*\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –æ–¥–Ω–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏\\.\\.\\.`, { parse_mode: 'MarkdownV2' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for (let i = 0; i < reviews.length; i++) {
            const reviewMessage = formatReviewMessage(reviews[i], i);
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown —Ä–µ–∂–∏–º–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await ctx.reply(reviewMessage, { parse_mode: 'Markdown' });
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                if (i < reviews.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
            } catch (msgError) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏ ${i + 1}:`, msgError);
                // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try {
                    const plainMessage = reviewMessage.replace(/\*/g, '');
                    await ctx.reply(plainMessage);
                } catch (plainError) {
                    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                    const simpleMessage = `–†–µ—Ü–µ–Ω–∑–∏—è ${i + 1}\n\n${reviews[i].title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n–ê–≤—Ç–æ—Ä: ${reviews[i].userName || '–ê–Ω–æ–Ω–∏–º'}\n–°—Ç—Ä–∞–Ω–∞: ${reviews[i].countryName}\n–û—Ü–µ–Ω–∫–∞: ${reviews[i].score}/5\n\n${reviews[i].text || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                    await ctx.reply(simpleMessage);
                }
            }
        }
        
        await ctx.reply(`‚úÖ –í—Å–µ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /reviews:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /month
bot.command('month', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏
        const reviews = await getMonthlyReviews(ctx);
        
        if (reviews.length === 0) {
            await ctx.reply('–†–µ—Ü–µ–Ω–∑–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await ctx.reply(`üóìÔ∏è *–í—Å–µ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø–æ–¥–∫–∞—Å—Ç–∞ "–î–≤–∞ –ø–æ —Ü–µ–Ω–µ –æ–¥–Ω–æ–≥–æ"*\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –æ–¥–Ω–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏\\.\\.\\.`, { parse_mode: 'MarkdownV2' });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for (let i = 0; i < reviews.length; i++) {
            const reviewMessage = formatReviewMessage(reviews[i], i);
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown —Ä–µ–∂–∏–º–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await ctx.reply(reviewMessage, { parse_mode: 'Markdown' });
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                if (i < reviews.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 200));
                }
            } catch (msgError) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏ ${i + 1}:`, msgError);
                // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try {
                    const plainMessage = reviewMessage.replace(/\*/g, '');
                    await ctx.reply(plainMessage);
                } catch (plainError) {
                    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                    const simpleMessage = `–†–µ—Ü–µ–Ω–∑–∏—è ${i + 1}\n\n${reviews[i].title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n–ê–≤—Ç–æ—Ä: ${reviews[i].userName || '–ê–Ω–æ–Ω–∏–º'}\n–°—Ç—Ä–∞–Ω–∞: ${reviews[i].countryName}\n–û—Ü–µ–Ω–∫–∞: ${reviews[i].score}/5\n\n${reviews[i].text || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                    await ctx.reply(simpleMessage);
                }
            }
        }
        
        await ctx.reply(`‚úÖ –í—Å–µ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –∑–∞ –º–µ—Å—è—Ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /month:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /all
bot.command('all', async (ctx) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏
        const reviews = await getAllPossibleReviews(ctx);
        
        if (reviews.length === 0) {
            await ctx.reply('–†–µ—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            return;
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (reviews.length > 100) {
            const estimatedMinutes = Math.ceil(reviews.length * 1.5 / 60 + Math.floor(reviews.length / 20) * 10 / 60);
            await ctx.reply(`‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ù–∞–π–¥–µ–Ω–æ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π\\!\n\n–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç ~${estimatedMinutes} –º–∏–Ω—É—Ç —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram\\.\n\n–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É\\.\\.\\.`, { parse_mode: 'MarkdownV2' });
        } else {
            await ctx.reply(`üåç *–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏: ${reviews.length} —à—Ç—É–∫*\n\n–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ –æ–¥–Ω–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏\\.\\.\\.`, { parse_mode: 'MarkdownV2' });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
        for (let i = 0; i < reviews.length; i++) {
            const reviewMessage = formatReviewMessage(reviews[i], i);
            
            try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown —Ä–µ–∂–∏–º–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await ctx.reply(reviewMessage, { parse_mode: 'Markdown' });
                
                // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                if (i < reviews.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1500)); // 1.5 —Å–µ–∫—É–Ω–¥—ã
                }
                
                // –ö–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É
                if ((i + 1) % 20 === 0 && i < reviews.length - 1) {
                    await ctx.reply(`‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram... –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${i + 1} –∏–∑ ${reviews.length}`);
                    await new Promise(resolve => setTimeout(resolve, 10000)); // 10 —Å–µ–∫—É–Ω–¥ –ø–∞—É–∑–∞
                }
                
                // –ö–∞–∂–¥—ã–µ 50 —Ä–µ—Ü–µ–Ω–∑–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
                if ((i + 1) % 50 === 0 && i < reviews.length - 1) {
                    const remaining = reviews.length - (i + 1);
                    const estimatedMinutes = Math.ceil(remaining * 1.5 / 60);
                    await ctx.reply(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${reviews.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ~${estimatedMinutes} –º–∏–Ω—É—Ç`);
                }
                
            } catch (msgError) {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏ ${i + 1}:`, msgError);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                if (msgError.description && msgError.description.includes('Too Many Requests')) {
                    const retryAfter = msgError.parameters?.retry_after || 60;
                    await ctx.reply(`‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram API. –ü–∞—É–∑–∞ –Ω–∞ ${retryAfter} —Å–µ–∫—É–Ω–¥...`);
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
                    i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —ç—Ç–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏
                    continue;
                }
                
                // –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try {
                    const plainMessage = reviewMessage.replace(/\*/g, '');
                    await ctx.reply(plainMessage);
                } catch (plainError) {
                    console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏ ${i + 1}:`, plainError);
                    
                    // –ï—Å–ª–∏ –∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if (plainError.description && plainError.description.includes('Too Many Requests')) {
                        const retryAfter = plainError.parameters?.retry_after || 60;
                        await ctx.reply(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç API. –ü–∞—É–∑–∞ –Ω–∞ ${retryAfter} —Å–µ–∫—É–Ω–¥...`);
                        await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
                        i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —ç—Ç–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏
                        continue;
                    }
                    
                    // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Ä–µ—Ü–µ–Ω–∑–∏—é
                    await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é ${i + 1}. –ü—Ä–æ–ø—É—Å–∫–∞—é...`);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                await new Promise(resolve => setTimeout(resolve, 3000));
            }
        }
        
        await ctx.reply(`‚úÖ –í—Å–µ ${reviews.length} —Ä–µ—Ü–µ–Ω–∑–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüåç –°—Ç—Ä–∞–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: 73\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: –¥–æ 219\nüìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π: ${reviews.length}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /all:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ—Ü–µ–Ω–∑–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –°–∫—Ä—ã—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
bot.command('test_episode', async (ctx) => {
    try {
        await ctx.reply('–¢–µ—Å—Ç–∏—Ä—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞...');
        
        const stats = await loadStats();
        const feed = await parser.parseURL(RSS_FEED_URL);
        
        if (!feed.items || feed.items.length === 0) {
            await ctx.reply('–û—à–∏–±–∫–∞: RSS-–ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞');
            return;
        }
        
        // –ë–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ø–∏–∑–æ–¥ –∏–∑ RSS
        const latestEpisode = feed.items[0];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const duration = parseDurationToSeconds(latestEpisode.itunes?.duration);
        const minutes = Math.round(duration / 60);
        
        await ctx.reply(`–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ø–∏–∑–æ–¥ –≤ RSS:\n"${latestEpisode.title}"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${minutes} –º–∏–Ω—É—Ç`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ï–ö–£–©–ï–ô —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞)
        const testStats = {
            ...stats,
            startDate: new Date(stats.startDate)
        };
        
        const message = await formatNewEpisodeMessage(testStats, latestEpisode);
        
        await ctx.reply('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞):\n\n' + message, { parse_mode: 'Markdown' });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on('text', (ctx) => {
    ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
const PORT = process.env.PORT || 3000;

bot.launch().then(() => {
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    loadStats().then(stats => {
        console.log(`üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalEpisodes} —ç–ø–∏–∑–æ–¥–æ–≤, ${Math.round(stats.totalHours)} —á–∞—Å–æ–≤`);
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(checkForNewEpisodes, 10 * 60 * 1000);
    console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)');
    
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

// –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
const http = require('http');
const server = http.createServer((req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Telegram Bot is running!');
});

server.listen(PORT, () => {
    console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// Graceful shutdown
process.once('SIGINT', () => {
    server.close();
    bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
    server.close();
    bot.stop('SIGTERM');
});
